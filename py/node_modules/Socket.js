"use strict";

const Socket = require("net").Socket;

Socket.prototype.readForever = function(handler){
	var buffer = new Buffer(0);
	var begin = 0;
	this.on("data", chunk => {
		const end = buffer.length + chunk.length;
		buffer = Buffer.concat([buffer, chunk], end);
		for(;;){
			if(end - begin < 2)
				break;
			const packetLen = buffer.readUInt16BE(begin);
			if(packetLen < 2){
				this.destroy();
				return;
			}
			if(end - begin < packetLen)
				break;
			handler.call(this, buffer.slice(begin, begin+packetLen));
			begin += packetLen;
		}
		if(begin > 0){
			buffer = buffer.slice(begin);
			begin = 0;
		}
	});
};

Socket.prototype.listenCloseEvent = function(timeout, handler){
	const onClose = () => {
		this.removeAllListeners();
		if(handler != null)
			handler(this);
	};
	this.on("close",  onClose);
	this.on("error",  onClose);
	this.on("timeout",onClose);
	this.setTimeout(timeout);
};