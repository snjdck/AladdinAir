"use strict";

const http = require("http");
const url = require("url");

function load(method, path, data, callback)
{
	var obj = url.parse(path);
	
	var options = {
		"host": obj.hostname,
		"port": obj.port || 80,
		"path": obj.pathname,
		"method": method
	};

	var request = http.request(options, response => {
		var body = null;
		response.on("data", chunk => {
			body = (body == null) ? chunk : Buffer.concat([body, chunk], body.length + chunk.length);
		}).on("end", () => {
			response.removeAllListeners();
			request.removeAllListeners();
			callback(200 == response.statusCode, body);
		});
	}).on("error", err => {
		request.removeAllListeners();
		callback(false, err);
	});
	
	if(data != null){
		request.write(JSON.stringify(data));
	}

	request.end();
}

exports.get  = (path, callback)			=> load("GET",  path, null, callback);
exports.post = (path, data, callback)	=> load("POST", path, data, callback);

function decodeRequestBody(request, body){
	var contentType = request.headers["content-type"];
	switch(contentType){
		case "x-www-form-urlencoded":
			return querystring.parse(body);
		case "application/octet-stream":
			return body;
		default:
			return JSON.parse(body);
	}
	return body;
}

exports.createServer = handler => http.createServer((request, response) => {
	var body = null;
	request.on("data", chunk => {
		body = (body == null) ? chunk : Buffer.concat([body, chunk], body.length + chunk.length);
	}).on("end", () => {
		request.removeAllListeners();
		if(request.method == "POST" && body != null)
			body = decodeRequestBody(request, body);
		handler(request, response, body);
	});
});
