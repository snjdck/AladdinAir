"use strict";

const Socket = require("net").Socket;

Socket.prototype.sendPacket = function(msgId, usrId, msgData){
	this.write(exports.CreatePacket(msgId, usrId, msgData));
};

const HEAD_SIZE = 9;

exports.CreateNamePacket = function(name){
	console.log(`server name: ${name}`);
	var packet = new Buffer(2 + name.length);
	packet.writeUInt16BE(packet.length);
	packet.write(name, 2);
	return packet;
};

exports.CreatePacket = function(msgId, usrId, msgData){
	var packet;
	if(msgData == null){
		packet = new Buffer(HEAD_SIZE);
	}else if(Buffer.isBuffer(msgData)){
		packet = Buffer.concat([new Buffer(HEAD_SIZE), msgData], HEAD_SIZE + msgData.length);
	}else{
		msgData = JSON.stringify(msgData);
		packet = new Buffer(HEAD_SIZE + Buffer.byteLength(msgData));
		packet.write(msgData, HEAD_SIZE);
	}
	packet.writeUInt16BE(packet.length);
	packet.writeUInt16BE(msgId, 2);
	packet.writeUInt16BE(usrId, 4);
	packet.writeUInt16BE(0, 6);
	packet.writeUInt8(0, 8);
	return packet;
};

exports.ReadMsgId	= packet => packet.readUInt16BE(2);
exports.ReadUsrId	= packet => packet.readUInt16BE(4);
exports.ReadToId	= packet => packet.readUInt16BE(6);
exports.ReadFromId	= packet => packet.readUInt8(8);

exports.ReadMsgData = function(packet){
	if(packet.length > HEAD_SIZE){
		var json = packet.toString("utf8", HEAD_SIZE);
		try{
			return JSON.parse(json);
		}catch(error){
			console.error("json parse error:" + json);
		}
	}
	return null;
};
